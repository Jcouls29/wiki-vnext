# ===============================================
# GROUPS
# ===============================================

extend type Query {
  groups: [Group] @auth(requires: ["write:groups", "manage:groups", "manage:system"])

  groupById(
    id: UUID!
  ): Group @auth(requires: ["write:groups", "manage:groups", "manage:system"])
}

extend type Mutation {
  createGroup(
    name: String!
  ): GroupResponse @auth(requires: ["write:groups", "manage:groups", "manage:system"])

  updateGroup(
    id: UUID!
    name: String!
    redirectOnLogin: String!
    permissions: [String]!
    pageRules: [PageRuleInput]!
  ): DefaultResponse @auth(requires: ["write:groups", "manage:groups", "manage:system"])

  deleteGroup(
    id: UUID!
  ): DefaultResponse @auth(requires: ["write:groups", "manage:groups", "manage:system"])

  assignUserToGroup(
    groupId: UUID!
    userId: UUID!
  ): DefaultResponse @auth(requires: ["write:groups", "manage:groups", "manage:system"])

  unassignUserFromGroup(
    groupId: UUID!
    userId: UUID!
  ): DefaultResponse @auth(requires: ["write:groups", "manage:groups", "manage:system"])
}

# -----------------------------------------------
# TYPES
# -----------------------------------------------

type GroupResponse {
  status: ResponseStatus
  group: Group
}

type Group {
  id: UUID
  name: String
  isSystem: Boolean
  redirectOnLogin: String
  permissions: [String]
  pageRules: [PageRule]
  users: [UserMinimal]
  userCount: Int
  createdAt: Date
  updatedAt: Date
}

type PageRule {
  id: String
  deny: Boolean
  match: PageRuleMatch
  roles: [String]
  path: String
  locales: [String]
}

input PageRuleInput {
  id: String!
  deny: Boolean!
  match: PageRuleMatch!
  roles: [String]!
  path: String!
  locales: [String]!
}

enum PageRuleMatch {
  START
  EXACT
  END
  REGEX
  TAG
}
